---
import { Tabs, TabItem } from '@astrojs/starlight/components';
import { fetchYAML } from '@lib/fetch-yaml.js'

const { shipName } = Astro.props;

const recipeLPCsURL = 'Resources/Prototypes/_Crescent/Entities/Recipes/Lathes/communardcrafts.yml';
const recipeShipComponentsURL = 'Resources/Prototypes/_Crescent/Entities/Recipes/Lathes/shipcomponents.yml';

const recipeLPCs = await fetchYAML(recipeLPCsURL);
const recipeShipComponents = await fetchYAML(recipeShipComponentsURL);

// each unit of steel, silver, gold, plasma contains 100 of said material
// each ship component contain 500 of said material
// hard-coded because it's in four different files but it'd be nice to do this programmatically in the future
const materialDivisor = 100;
const shipComponentDivisor = 500;

// console.log(recipeLPCs);

const shipLPCEntry = recipeLPCs.find(ship => ship.id.includes(shipName));

const costLPC = {};

const costLPCMaterials = {
    Steel: 0,
    Silver: 0,
    Gold: 0,
    Plasma: 0
}

const NCWLShipyardMultiplier = 1.1765; // NCWL shipyard manufactorium is configured to use 17.65% more materials than default

Object.keys(shipLPCEntry.materials).forEach(key => {
    costLPC[key] = shipLPCEntry.materials[key] / shipComponentDivisor;
})

const shipEngineEntry = recipeShipComponents.find(component => component.id == "ShipEngine");
const shipElectronicsEntry = recipeShipComponents.find(component => component.id == "ShipElectronics");
const shipHullEntry = recipeShipComponents.find(component => component.id == "ShipHull");

Object.keys(shipEngineEntry.materials).forEach(key => {
    costLPCMaterials[key] += (shipEngineEntry.materials[key] * costLPC.StarshipEngineComponents) / materialDivisor;
})

Object.keys(shipElectronicsEntry.materials).forEach(key => {
    costLPCMaterials[key] += (shipElectronicsEntry.materials[key] * costLPC.ShipComponents) / materialDivisor;
})

Object.keys(shipHullEntry.materials).forEach(key => {
    costLPCMaterials[key] += (shipHullEntry.materials[key] * costLPC.ShipHull) / materialDivisor;
})

---

<ul>
    <li><strong>Engine Components</strong>: {costLPC.StarshipEngineComponents}</li>
    <li><strong>Electronics Components</strong>: {costLPC.ShipComponents}</li>
    <li><strong>Hull Components</strong>: {costLPC.ShipHull}</li>
    <li><strong>Total Materials: </strong>
        <ul>
            <li>Steel: {Math.round(costLPCMaterials.Steel * 1000) / 1000}</li>
            <li>Silver: {Math.round(costLPCMaterials.Silver * 1000) / 1000}</li>
            <li>Gold: {Math.round(costLPCMaterials.Gold * 1000) / 1000}</li>
            <li>Plasma: {Math.round(costLPCMaterials.Plasma * 1000) / 1000}</li>
        </ul>
    </li>
</ul>


{/* commenting out below section until it's confirmed the shipyard manufactorium still has a penalty */}
{/* <p><i>The NCWL shipyard manufactorium has an efficiency penalty of {Math.round((NCWLShipyardMultiplier - 1) * 100000) / 1000}%.</i></p>

<Tabs>
    <TabItem label="NCWL Shipyard Values">
        <ul>
            <li><strong>Engine Components</strong>: {costLPC.StarshipEngineComponents}</li>
            <li><strong>Electronics Components</strong>: {costLPC.ShipComponents}</li>
            <li><strong>Hull Components</strong>: {costLPC.ShipHull}</li>
            <li><strong>Total Materials: </strong>
                <ul>
                    <li>Steel: {Math.round(costLPCMaterials.Steel * NCWLShipyardMultiplier * 1000) / 1000}</li>
                    <li>Silver: {Math.round(costLPCMaterials.Silver * NCWLShipyardMultiplier * 1000) / 1000}</li>
                    <li>Gold: {Math.round(costLPCMaterials.Gold * NCWLShipyardMultiplier * 1000) / 1000}</li>
                    <li>Plasma: {Math.round(costLPCMaterials.Plasma * NCWLShipyardMultiplier * 1000) / 1000}</li>
                </ul>
            </li>
        </ul>
    </TabItem>
    <TabItem label="Default Values">
        <ul>
            <li><strong>Engine Components</strong>: {costLPC.StarshipEngineComponents}</li>
            <li><strong>Electronics Components</strong>: {costLPC.ShipComponents}</li>
            <li><strong>Hull Components</strong>: {costLPC.ShipHull}</li>
            <li><strong>Total Materials: </strong>
                <ul>
                    <li>Steel: {Math.round(costLPCMaterials.Steel * 1000) / 1000}</li>
                    <li>Silver: {Math.round(costLPCMaterials.Silver * 1000) / 1000}</li>
                    <li>Gold: {Math.round(costLPCMaterials.Gold * 1000) / 1000}</li>
                    <li>Plasma: {Math.round(costLPCMaterials.Plasma * 1000) / 1000}</li>
                </ul>
            </li>
        </ul>
    </TabItem>
</Tabs>
*/ }
