---
import { fetchYAML } from '@lib/fetch-yaml.js'
import fs from 'fs'

const { weaponID } = Astro.props;

const cannons = await fetchYAML('Resources/Prototypes/_Crescent/Entities/Shipguns/Guns/fixedpoints.yml');
const turrets = await fetchYAML('Resources/Prototypes/_Crescent/Entities/Shipguns/Guns/turrets.yml');

const shipgunCartridges = await fetchYAML('Resources/Prototypes/_Crescent/Entities/Shipguns/Bullets/cartridges.yml');
const shipgunAmmo = await fetchYAML('Resources/Prototypes/_Crescent/Entities/Shipguns/Bullets/ammo.yml');
const shipgunProjectiles = await fetchYAML('Resources/Prototypes/_Crescent/Entities/Shipguns/Bullets/projectiles.yml');
const basicProjectiles = await fetchYAML('Resources/Prototypes/Entities/Objects/Weapons/Guns/Projectiles/projectiles.yml');


// Manually defined in a JSON file because tracing back through various cartridges and magazines programmatically is nightmarish.
const shipWeaponProjectiles = JSON.parse(fs.readFileSync(`./src/assets/data/ShipWeaponProjectiles.json`, 'utf8'));

// If an entity doesn't have a given component, search its parents.
function recursiveComponentSearch(entity: object, entityFile: object, componentType: string) {
    let result;
    let currentSearch = entity;
    while (!result) {
        if ('components' in currentSearch && currentSearch.components.find(component => component.type == componentType)) {
            result = currentSearch.components.find(component => component.type == componentType);
        } else {
            currentSearch = entityFile.find(entity => entity.id == currentSearch.parent);
        }
    }

    return result;
}

const weaponFile = cannons.find(weapon => weapon.id == weaponID) ? cannons : turrets;

const weaponEntry = weaponFile.find(weapon => weapon.id == weaponID);

const weaponName = weaponEntry.name;
const weaponSpeed = recursiveComponentSearch(weaponEntry, weaponFile, "Gun").projectileSpeed;

const projectileType = shipWeaponProjectiles[weaponID].projectile;
const projectileFile = shipgunCartridges.find(projectile => projectile.id == projectileType) ? shipgunCartridges
                     : shipgunAmmo.find(projectile => projectile.id == projectileType) ? shipgunAmmo 
                     : shipgunProjectiles.find(projectile => projectile.id == projectileType) ? shipgunProjectiles 
                     : basicProjectiles;
const projectileEntry = projectileFile.find(projectile => projectile.id == projectileType);
const projectileLifetime = recursiveComponentSearch(projectileEntry, projectileFile, "TimedDespawn").lifetime;

const weaponRange = weaponSpeed * projectileLifetime;
---
<span class="weapon-name">{weaponName}</span> <sup class="weapon-range">{weaponRange}m</sup>

<style>
    .weapon-name {
        font-weight: bold;
    }
    .weapon-range {
        font-style: italic;
    }
</style>