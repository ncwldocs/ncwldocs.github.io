---
import { fetchYAML } from '@lib/fetch-yaml.js'
import fs from 'fs'

const { shipDirectory = (Astro.url.pathname.split('/')[2] == 'ncwl') ? 'NCWL' : 'Civilian', ship } = Astro.props;

const fixedWeapons = await fetchYAML('Resources/Prototypes/_Crescent/Entities/Shipguns/Guns/fixedpoints.yml');
const turretWeapons = await fetchYAML('Resources/Prototypes/_Crescent/Entities/Shipguns/Guns/turrets.yml');
const hardpoints = await fetchYAML('Resources/Prototypes/_Crescent/Entities/Structures/Machines/Computers/hardpoints.yml');

const shipgunCartridges = await fetchYAML('Resources/Prototypes/_Crescent/Entities/Shipguns/Bullets/cartridges.yml');
const shipgunAmmo = await fetchYAML('Resources/Prototypes/_Crescent/Entities/Shipguns/Bullets/ammo.yml');
const shipgunProjectiles = await fetchYAML('Resources/Prototypes/_Crescent/Entities/Shipguns/Bullets/projectiles.yml');
const basicProjectiles = await fetchYAML('Resources/Prototypes/Entities/Objects/Weapons/Guns/Projectiles/projectiles.yml');

const shipFile = await fetchYAML(`Resources/Maps/_Crescent/Shuttles/${shipDirectory}/${ship.toLowerCase()}.yml`);

// Manually defined in a JSON file because tracing back through various cartridges and magazines programmatically is nightmarish.
const shipWeaponProjectiles = JSON.parse(fs.readFileSync(`./src/assets/data/ShipWeaponProjectiles.json`, 'utf8'));

class WeaponListing {
name: string;
quantity: number;
range: number;
    constructor(name: string, quantity: number, range: number) {
        this.name = name;
        this.quantity = quantity;
        this.range = range;
    }
}

// If an entity doesn't have a given component, search its parents.
function recursiveComponentSearch(entity: object, entityFile: object, componentType: string) {
    let result;
    let currentSearch = entity;
    while (!result) {
        if ('components' in currentSearch && currentSearch.components.find((component: { type: string; }) => component.type == componentType)) {
            result = currentSearch.components.find((component: { type: string; }) => component.type == componentType);
        } else {
            currentSearch = entityFile.find((entity: { id: string; }) => entity.id == currentSearch.parent);
        }
    }

    return result;
}

function getWeaponData(weapon: object) {
    const weaponFile = fixedWeapons.find((entry: { id: any; }) => entry.id == weapon.proto) ? fixedWeapons : turretWeapons;

    // console.log(weapon);
    const projectileType = shipWeaponProjectiles[weapon.proto].projectile;
    // console.log(projectileType);
    const projectileFile = shipgunCartridges.find((projectile: { id: string; }) => projectile.id == projectileType) ? shipgunCartridges
                     : shipgunAmmo.find((projectile: { id: string; }) => projectile.id == projectileType) ? shipgunAmmo 
                     : shipgunProjectiles.find((projectile: { id: string; }) => projectile.id == projectileType) ? shipgunProjectiles 
                     : basicProjectiles;
    const projectileEntry = projectileFile.find((projectile: { id: string; }) => projectile.id == projectileType);
    const projectileLifetime = recursiveComponentSearch(projectileEntry, projectileFile, "TimedDespawn").lifetime;

    const weaponEntry = weaponFile.find((entry: { id: string; }) => entry.id == weapon.proto);

    const weaponSpeed = recursiveComponentSearch(weaponEntry, weaponFile, "Gun").projectileSpeed;
    const weaponRange = weaponSpeed * projectileLifetime;
    
    return new WeaponListing(weaponEntry.name, 1, weaponRange);
}

const shipHardpointList = [];
const shipWeaponList = [];
const shipWeaponFixedList: WeaponListing[] = [];
const shipWeaponTurretList: WeaponListing[] = [];

for (const prototype of hardpoints) {
  const hardpointPrototype = shipFile.entities.find((entity: { proto: string; }) => entity.proto == prototype.id);
  if (hardpointPrototype) {
    shipHardpointList.push(hardpointPrototype);
  }
}

// build list of weapons
for (const prototype of fixedWeapons) {
    const weaponPrototype = shipFile.entities.find((entity: { proto: string; }) => entity.proto == prototype.id);
    if (weaponPrototype) {
        shipWeaponList.push(weaponPrototype)
    }
}

for (const prototype of turretWeapons) {
    const weaponPrototype = shipFile.entities.find((entity: { proto: string; }) => entity.proto == prototype.id);
    if (weaponPrototype) {
        shipWeaponList.push(weaponPrototype)
    }
}

for (const hardpoint of shipHardpointList) {
    for (const hardpointEntity of hardpoint.entities) {
        const hardpointPosition = hardpointEntity.components.find((component: { type: string; }) => component.type == 'Transform').pos;
        for (const weapon of shipWeaponList) {
            const weaponData = getWeaponData(weapon);
            for (const weaponEntity of weapon.entities) {
                const weaponPosition = weaponEntity.components.find((component: { type: string; }) => component.type == 'Transform').pos;
                if (weaponPosition == hardpointPosition) {
                    if (hardpoint.proto.includes('Fixed')) {
                        if (shipWeaponFixedList.some(listItem => listItem.name == weaponData.name)) {
                            shipWeaponFixedList[shipWeaponFixedList.findIndex(listItem => listItem.name == weaponData.name)].quantity += 1;
                        } else {
                            shipWeaponFixedList.push(getWeaponData(weapon));
                        }
                    } else {
                        if (shipWeaponTurretList.some(listItem => listItem.name == weaponData.name)) {
                            shipWeaponTurretList[shipWeaponTurretList.findIndex(listItem => listItem.name == weaponData.name)].quantity += 1;
                        } else {
                            shipWeaponTurretList.push(getWeaponData(weapon));
                        }
                    }
                }
            }
        }
    }
}





/*
for (const prototype of fixedWeapons) {
    const weaponPrototype = shipFile.entities.find((entity: { proto: string; }) => entity.proto == prototype.id);
    if (weaponPrototype) {
        // console.log(weaponPrototype);
        const projectileType = shipWeaponProjectiles[weaponPrototype.proto].projectile;
        const projectileFile = shipgunCartridges.find((projectile: { id: string; }) => projectile.id == projectileType) ? shipgunCartridges
                     : shipgunAmmo.find((projectile: { id: string; }) => projectile.id == projectileType) ? shipgunAmmo 
                     : shipgunProjectiles.find((projectile: { id: string; }) => projectile.id == projectileType) ? shipgunProjectiles 
                     : basicProjectiles;
        const projectileEntry = projectileFile.find((projectile: { id: string; }) => projectile.id == projectileType);
        const projectileLifetime = recursiveComponentSearch(projectileEntry, projectileFile, "TimedDespawn").lifetime;

        const weaponEntry = fixedWeapons.find((weapon: { id: string; }) => weapon.id == prototype.id);
        const weaponSpeed = recursiveComponentSearch(weaponEntry, fixedWeapons, "Gun").projectileSpeed;
        const weaponRange = weaponSpeed * projectileLifetime;
        
        shipWeaponFixedList.push(new WeaponListing(weaponEntry.name, weaponPrototype.entities.length, weaponRange));
    }
}

for (const prototype of turretWeapons) {
    const weaponPrototype = shipFile.entities.find((entity: { proto: string; }) => entity.proto == prototype.id);
    if (weaponPrototype) {
        // console.log(weaponPrototype);
        const projectileType = shipWeaponProjectiles[weaponPrototype.proto].projectile;
        const projectileFile = shipgunCartridges.find((projectile: { id: string; }) => projectile.id == projectileType) ? shipgunCartridges
                     : shipgunAmmo.find((projectile: { id: string; }) => projectile.id == projectileType) ? shipgunAmmo 
                     : shipgunProjectiles.find((projectile: { id: string; }) => projectile.id == projectileType) ? shipgunProjectiles 
                     : basicProjectiles;
        const projectileEntry = projectileFile.find((projectile: { id: string; }) => projectile.id == projectileType);
        const projectileLifetime = recursiveComponentSearch(projectileEntry, projectileFile, "TimedDespawn").lifetime;

        const weaponEntry = turretWeapons.find((weapon: { id: string; }) => weapon.id == prototype.id);
        const weaponSpeed = recursiveComponentSearch(weaponEntry, turretWeapons, "Gun").projectileSpeed;
        const weaponRange = weaponSpeed * projectileLifetime;
        
        // console.log(weaponPrototype.proto);
        shipWeaponTurretList.push(new WeaponListing(weaponEntry.name, weaponPrototype.entities.length, weaponRange));
    }
}
*/

---
{(shipWeaponFixedList.length > 0) && <h3>Fixed Weapons</h3>
<table>
    <tr>
        <th>Type</th>
        <th>Quantity</th>
        <th>Range</th>
    </tr>
    {shipWeaponFixedList.map((shipWeapon) => 
    <tr>
        <td>{shipWeapon.name}</td>
        <td>{shipWeapon.quantity}</td>
        <td>{shipWeapon.range}m</td>
    </tr>
    )}
</table>}

{(shipWeaponTurretList.length > 0) && <h3>Turrets</h3>
    <table>
        <tr>
            <th>Type</th>
            <th>Quantity</th>
            <th>Range</th>
        </tr>
        {shipWeaponTurretList.map((shipWeapon) => 
        <tr>
            <td>{shipWeapon.name}</td>
            <td>{shipWeapon.quantity}</td>
            <td>{shipWeapon.range}m</td>
        </tr>
        )}
    </table>}

{shipWeaponFixedList.length == 0 && shipWeaponTurretList.length == 0 && <p>N/A</p>}